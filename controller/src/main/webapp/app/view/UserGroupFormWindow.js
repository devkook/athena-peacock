/*
 * File: app/view/UserGroupFormWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Peacock.view.UserGroupFormWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.userGroupFormWindow',

    height: 241,
    width: 598,
    layout: {
        type: 'fit'
    },
    title: 'Create New UserGroup',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    id: 'userGroupForm',
                    bodyPadding: 10,
                    header: false,
                    title: 'My Form',
                    fieldDefaults: {
                        msgTarget: 'side'
                    },
                    method: 'post',
                    waitMsgTarget: true,
                    items: [
                        {
                            xtype: 'textfield',
                            fieldLabel: 'Group ID',
                            name: 'group_id',
                            fieldStyle: 'border : none',
                            readOnly: true
                        },
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            afterLabelTextTpl: [
                                '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>'
                            ],
                            fieldLabel: 'Group Name',
                            name: 'group_name',
                            allowBlank: false
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            fieldLabel: 'Description',
                            name: 'description'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    ui: 'footer',
                    layout: {
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            text: 'Save',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Close',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick1,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onButtonClick: function(button, e, eOpts) {
        var formPanel = Ext.getCmp("userGroupForm");

        var action = "usergroup/create";

        if(formPanel.getForm().findField("group_id").getValue() > 0){
            action = "usergroup/update";
        }

        formPanel.getForm().submit({
            clientValidation: true,
            url: action,
            params: {
                newStatus: 'delivered'
            },
            waitMsg: 'Saving Data...',
            success: function(form, action) {
                Ext.Msg.alert('Success', action.result.msg);

                Ext.getCmp('mainGridPanel').getStore().reload();
                formPanel.up('window').close();
            },
            failure: function(form, action) {
                switch (action.failureType) {
                    case Ext.form.action.Action.CLIENT_INVALID:
                    Ext.Msg.alert('Failure', '필수 항목중 누락된 항목이 있는것 같습니다.');
                    break;
                    case Ext.form.action.Action.CONNECT_FAILURE:
                    Ext.Msg.alert('Failure', 'Server communication failed');
                    break;
                    case Ext.form.action.Action.SERVER_INVALID:
                    Ext.Msg.alert('Failure', action.result.msg);
                }
            }
        });
    },

    onButtonClick1: function(button, e, eOpts) {

        Ext.MessageBox.confirm('Confirm', 'Are you sure you want to do that?', function(btn){

            if(btn == "yes"){
                //Ext.getCmp("userGroupForm").getForm().reset();
                Ext.getCmp("userGroupForm").up("window").close();
            }

        });


    }

});