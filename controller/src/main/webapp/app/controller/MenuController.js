/*
 * File: app/controller/MenuController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Peacock.controller.MenuController', {
    extend: 'Ext.app.Controller',

    stores: [
        'UsersJsonStore',
        'MachineListStore'
    ],

    onTreepanelItemClick: function(dataview, record, item, index, e, eOpts) {

        Peacock.app.debug("MenuController.onTreepanelItemClick. " + record.get('id'));

        Peacock.app.menu_id = record.get('id');//선택한 메뉴 id 저장.



        Ext.getCmp("tbActionMenu").setDisabled(true);
        Ext.getCmp('detailTitleLabel').setText("");


        if(record.get('id') == 'inst-dash'){

            Ext.getCmp('centerContainer').layout.setActiveItem(0);

        }else {

            Ext.getCmp('centerContainer').layout.setActiveItem(1);

            var grid = Ext.getCmp('mainGridPanel');

            var pagingToolbar = grid.getDockedItems('toolbar[dock="bottom"]')[0];

            Ext.suspendLayouts();


            if (record.get('id') == 'insts'){
                //alert("instances.");


                this.viewInstances(grid);

            }else if (record.get('id') == 'rhevm-vms'){
                this.viewVirtualMachines(grid);

            }else if (record.get('id') == 'rhevm-tmps'){
                alert("packages.");

            }else if (record.get('id') == 'scal-grp'){

                this.viewScalingGroups(grid);

            }else if (record.get('id') == 'scal-lb'){
                alert("scal-lb.");

            }else if (record.get('id') == 'user-grp'){

                this.viewGroups(grid);

            }else if (record.get('id') == 'users'){


                this.viewUsers(grid);
            }


            pagingToolbar.bindStore(grid.getStore());


            Ext.resumeLayouts(true);

            grid.getStore().load();
        }
    },

    viewUsers: function(grid) {
        /*
        *  user list 화면 보여주기.
        */


        grid.setTitle('User List');
        grid.reconfigure(Ext.getStore('UsersJsonStore'), [{
            text: 'ID',
            dataIndex: 'user_id'
        }, {
            text: 'User Name',
            dataIndex: 'user_name'
        }, {
            text: 'Groups',
            dataIndex: 'groups'
        }, {
            text: 'Password',
            dataIndex: 'passwd'
        }, {
            text: 'Create Date',
            dataIndex: 'reg_dt',
            width: 200
        }]);


        /*
        * toolbar menu 활성화
        */
        Ext.getCmp("mainButton").setText("Create New User");

        Ext.getCmp("tbActionStart").hide();
        Ext.getCmp("tbActionStop").hide();
        Ext.getCmp("tbActionTerminate").hide();
        Ext.getCmp("tbActionEdit").show();
        Ext.getCmp("tbActionDelete").show();
        Ext.getCmp("tbActionRegister").hide();

    },

    viewInstances: function(grid) {
        /*
        *  instance list 화면 보여주기.
        */


        grid.setTitle('Instance List');
        grid.reconfigure(Ext.getStore('MachineListStore'), [{
            text: 'ID',
            dataIndex: 'machineId'
        }, {
            text: 'Host',
            dataIndex: 'hostName',
            width: 200
        }, {
            text: 'OS Name',
            dataIndex: 'osName',
            width: 200
        }, {
            text: 'OS Version',
            dataIndex: 'osVer',
            width: 200
        }, {
            text: 'Staus',
            dataIndex: 'status'
        }, {
            text: 'Core',
            dataIndex: 'cpuNum'

        }]);


        /*
        * toolbar menu 활성화
        */
        Ext.getCmp("mainButton").setText("Launch");

        Ext.getCmp("tbActionStart").show();
        Ext.getCmp("tbActionStop").show();
        Ext.getCmp("tbActionTerminate").show();
        Ext.getCmp("tbActionEdit").hide();
        Ext.getCmp("tbActionDelete").hide();
        Ext.getCmp("tbActionRegister").hide();


    },

    viewGroups: function(grid) {
        /*
        *  User Group list 화면 보여주기.
        */


        grid.setTitle('Group List');
        grid.reconfigure(Ext.getStore('UserGroupListStore'), [{
            text: 'Group Name',
            dataIndex: 'group_name'
        }, {
            text: 'Users',
            dataIndex: 'users'
        }, {
            text: 'Description',
            dataIndex: 'description',
            width: 200
        }, {
            text: 'Create Date',
            dataIndex: 'reg_dt',
            width: 200
        }]);


        /*
        * toolbar menu 활성화
        */
        Ext.getCmp("mainButton").setText("Create New Group");

        Ext.getCmp("tbActionStart").hide();
        Ext.getCmp("tbActionStop").hide();
        Ext.getCmp("tbActionTerminate").hide();
        Ext.getCmp("tbActionEdit").show();
        Ext.getCmp("tbActionDelete").show();
        Ext.getCmp("tbActionRegister").hide();
    },

    viewScalingGroups: function(grid) {

        /*
        *  Scaling Group list 화면 보여주기.
        */


        grid.setTitle('Scaling Group List');
        grid.reconfigure(Ext.getStore('ASGroupListStore'), [{
            xtype: 'rownumberer'
        }, {
            text: 'SG Name',
            dataIndex: 'as_group_name'
        }, {
            text: 'Min',
            dataIndex: 'min_size'
        }, {
            text: 'Max',
            dataIndex: 'max_size'
        }, {
            text: 'Create Date',
            dataIndex: 'reg_dt',
            width: 200
        }]);


        /*
        * toolbar menu 활성화
        */
        Ext.getCmp("mainButton").setText("Create SG");

        Ext.getCmp("tbActionStart").hide();
        Ext.getCmp("tbActionStop").hide();
        Ext.getCmp("tbActionTerminate").hide();
        Ext.getCmp("tbActionEdit").hide();
        Ext.getCmp("tbActionDelete").show();
        Ext.getCmp("tbActionRegister").hide();
    },

    viewVirtualMachines: function(grid) {
        /*
        *  user list 화면 보여주기.
        */


        grid.setTitle('Virtual Machine List');
        grid.reconfigure(Ext.getStore('VmListJsonStore'), [{
            text: 'Name',
            dataIndex: 'name',
            width: 200    
        }, {
            text: 'Domain',
            dataIndex: 'domain'
        }, {
            text: 'Cluster',
            dataIndex: 'cluster'
        }, {
            text: 'Host',
            dataIndex: 'host',
            width: 150    
        }, {
            text: 'OS',
            dataIndex: 'os',
            width: 250    
        }, {
            text: 'Status',
            dataIndex: 'status'    
        }, {
            text: 'Create Time',
            dataIndex: 'creationTime',
            width: 170
        }, {
            text: 'Description',
            dataIndex: 'description',
            width: 300    
        }]);


        /*
        * toolbar menu 활성화
        */
        Ext.getCmp("mainButton").setText("Launch");

        Ext.getCmp("tbActionStart").hide();
        Ext.getCmp("tbActionStop").hide();
        Ext.getCmp("tbActionTerminate").hide();
        Ext.getCmp("tbActionEdit").show();
        Ext.getCmp("tbActionDelete").show();
        Ext.getCmp("tbActionRegister").hide();

    },

    init: function(application) {
        this.control({
            "#westPanel treepanel": {
                itemclick: this.onTreepanelItemClick
            }
        });
    }

});
