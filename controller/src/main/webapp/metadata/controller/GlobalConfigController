{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "GlobalConfigController"
    },
    "designerId": "08950a00-7767-4d84-b8e0-a94c8c2ba598",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "init",
                "designer|params": [
                    "application"
                ],
                "implHandler": [
                    "\r",
                    "//Peacock.app.debug(\"GlobalAjaxController.init.\" ); // 에러남.\r",
                    "\r",
                    "/*\r",
                    " * Global Ajax Config\r",
                    " */\r",
                    "Ext.Ajax.on(\"requestexception\", function(conn, response, options, eOpts){\r",
                    "\r",
                    "\r",
                    "    Ext.Msg.show({\r",
                    "        title:'Server Error',\r",
                    "        msg: 'server-side failure with status code ' + response.status,\r",
                    "        buttons: Ext.Msg.OK,\r",
                    "        icon: Ext.Msg.ERROR\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "\r",
                    "/*\r",
                    " * Global Validation(VTypes) Config\r",
                    " */\r",
                    "Ext.apply(Ext.form.field.VTypes, {\r",
                    "    daterange: function(val, field) {\r",
                    "        var date = field.parseDate(val);\r",
                    "\r",
                    "        if (!date) {\r",
                    "            return false;\r",
                    "        }\r",
                    "        if (field.startDateField && (!this.dateRangeMax || (date.getTime() != this.dateRangeMax.getTime()))) {\r",
                    "            var start = field.up('form').down('#' + field.startDateField);\r",
                    "            start.setMaxValue(date);\r",
                    "            start.validate();\r",
                    "            this.dateRangeMax = date;\r",
                    "        }\r",
                    "        else if (field.endDateField && (!this.dateRangeMin || (date.getTime() != this.dateRangeMin.getTime()))) {\r",
                    "            var end = field.up('form').down('#' + field.endDateField);\r",
                    "            end.setMinValue(date);\r",
                    "            end.validate();\r",
                    "            this.dateRangeMin = date;\r",
                    "        }\r",
                    "        /*\r",
                    "        * Always return true since we're only using this vtype to set the\r",
                    "        * min/max allowed values (these are tested for after the vtype test)\r",
                    "        */\r",
                    "        return true;\r",
                    "    },\r",
                    "\r",
                    "    daterangeText: 'Start date must be less than end date',\r",
                    "\r",
                    "    password: function(val, field) {\r",
                    "        var pwd = field.up('form').down('#passwd');\r",
                    "        return (val == pwd.getValue());\r",
                    "    },\r",
                    "\r",
                    "    passwordText: 'Passwords do not match',\r",
                    "    \r",
                    "    numeric: function(val, field) {                                 \r",
                    "        var numericRe = /(^-?\\d\\d*\\.\\d*$)|(^-?\\d\\d*$)|(^-?\\.\\d\\d*$)/;  \r",
                    "        return numericRe.test(val);                       \r",
                    "    },\r",
                    "    numericText : 'Not a valid numeric number. Must be numbers',\r",
                    "    numericMask : /[.0-9]/\r",
                    "});"
                ]
            },
            "designerId": "5844ac5a-a9f9-4f7b-a139-df8e1bcea1fe"
        }
    ]
}